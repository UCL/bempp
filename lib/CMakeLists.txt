#Configure All Option files
configure_file(
	${CMAKE_SOURCE_DIR}/lib/common/config_trilinos.hpp.in
        ${CMAKE_BINARY_DIR}/include/common/config_trilinos.hpp)
configure_file(
	${CMAKE_SOURCE_DIR}/lib/common/config_ahmed.hpp.in
        ${CMAKE_BINARY_DIR}/include/common/config_ahmed.hpp)
configure_file(
	${CMAKE_SOURCE_DIR}/lib/common/config_opencl.hpp.in
        ${CMAKE_BINARY_DIR}/include/common/config_opencl.hpp)
configure_file(
        ${CMAKE_SOURCE_DIR}/lib/common/config_alugrid.hpp.in
        ${CMAKE_BINARY_DIR}/include/common/config_alugrid.hpp)
configure_file(
        ${CMAKE_SOURCE_DIR}/lib/common/config_data_types.hpp.in
        ${CMAKE_BINARY_DIR}/include/common/config_data_types.hpp)
include_directories(${CMAKE_BINARY_DIR}/include/common)

# Find all source and header files
file(GLOB_RECURSE LIB_SOURCES *.cpp)
file(GLOB_RECURSE LIB_HEADERS *.hpp)

# Add OpenMP support (only needed for AHMED)
if (WITH_AHMED)
  include(FindOpenMP)
  if (OpenMP_FOUND)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  endif (OpenMP_FOUND)
endif (WITH_AHMED)



# Add include directories

# Boost
include_directories(${BOOST_INCLUDE_DIR})

# ARMADILLO
include_directories(${ARMADILLO_INCLUDE_DIR})

# TBB
include_directories(${TBB_INCLUDE_DIR})

# AHMED
if (WITH_AHMED)
   include_directories(${AHMED_INCLUDE_DIR})
endif ()

# Dune
include_directories(${CMAKE_SOURCE_DIR}/contrib/dune/dune-common)
include_directories(${CMAKE_SOURCE_DIR}/contrib/dune/dune-grid)
include_directories(${CMAKE_SOURCE_DIR}/contrib/dune/dune-localfunctions)
include_directories(${CMAKE_SOURCE_DIR}/contrib/dune/dune-foamgrid)

# Trilinos

if (BEMPP_TRILINOS)
  include(${CMAKE_SOURCE_DIR}/cmake/trilinos_headers.cmake)
else ()
  include_directories(${Trilinos_INCLUDE_DIRS} ${Trilinos_TPL_INCLUDE_DIRS})
endif (BEMPP_TRILINOS)

# Headers are ignored by make, but their list is used by IDEs
# like Qt Creator and Visual Studio to generate project file list.
add_library(bempp SHARED 
	${LIB_SOURCES} 
	${LIB_HEADERS}
	${DUNE_FOAMGRID_HEADERS}
	${DUNE_GRID_HEADERS}
	${DUNE_COMMON_HEADERS}
        ${DUNE_LOCALFUNCTIONS_HEADERS}
	)

target_link_libraries (bempp
	${BLAS_LIBRARIES}
	${LIB_DUNE_COMMON}
	${LIB_DUNE_GRID}
	${OPENCL_LIBRARIES}
	)

# TBB

if (TBB_LIBRARY_DEBUG_FOUND)
	target_link_libraries (bempp debug ${TBB_LIBRARY_DEBUG} optimized ${TBB_LIBRARY_RELEASE})
else ()
	target_link_libraries (bempp ${TBB_LIBRARY_RELEASE})
endif ()

set_property(
   TARGET bempp
   PROPERTY COMPILE_DEFINITIONS_DEBUG TBB_USE_DEBUG=1
   )

if (WITH_AHMED)
    target_link_libraries (bempp ${AHMED_LIBRARY} ${METIS_LIBRARY})
    include_directories(${AHMED_INCLUDE_DIR})
endif ()

if (WITH_TRILINOS)
    target_link_libraries (bempp
        ${AMESOS_LIBRARY}
        ${STRATIMIKOS_LIBRARY}
        ${STRATIMIKOS_BELOS_LIBRARY}
        ${BELOS_LIBRARY}
        ${EPETRA_LIBRARY}
        ${THYRA_CORE_LIBRARY}
        ${TEUCHOS_LIBRARY}
        ${RTOP_LIBRARY}
        ${HDF5_LIBRARY})
    include_directories(${TRILINOS_INCLUDE_DIR})
endif ()

if (WITH_ALUGRID)
    target_link_libraries (bempp ${ALUGRID_LIBRARY})
endif ()

# Add a target to generate API documentation with Doxygen
find_package(Doxygen)
if (DOXYGEN_FOUND)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in 
    ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/../doc)
  add_custom_target(doc 
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/../doc
    COMMENT "Generate API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)

# Install library
install(TARGETS bempp
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib)

# Install header files
install(FILES ${LIB_HEADERS}
  DESTINATION include/bempp)
